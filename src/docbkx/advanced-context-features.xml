<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="advanced-context-features" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/2000/svg">
	<title>Advanced context features</title>

	<sect1 xml:id="knowing-your-parents-and-your-children">
		<title>Knowing your parents and your children</title>
		<para>There two ways of linking contexts. Both dictate how information is shared between these
			contexts.</para>
		<para>The following sections describe the differences and the ways to set these scenario's
			up.</para>
		<sect2 xml:id="context-parents">
			<title>Context parents</title>
			<para>In the first case a context is assigned a parent. In this case the child knows about the
				parent, yet the parent knows nothing about the child context. By assigning another
					<literal>IApplicationContext</literal> instance to this parent property the getObject()
				method will first see if the current context can create the requested object instance, if no
				appropriate <literal>ObjectDefinition</literal> can be found it will request it from its
				parent factory.</para>
			<para>When a context gets assigned a parent it will automatically add its eventbus as a
				listener to its parent's eventbus. That way all regular events dispatched by the parent will
				also be received by the child.</para>
			<sect3 xml:id="a-simple-example-of-a-child-parent-hierarchy">
				<title>A simple example of a child/parent hierarchy</title>
				<para>Imagine a scenario with two application contexts. One is created by the main application
					and the other is created inside a module that is loaded at a later time.</para>
				<para>We will refer to the first as  <emphasis role="bold">application context</emphasis>  and
					the latter as  <emphasis role="bold">child context</emphasis>.</para>
				<para>Now imagine the configuration of the <emphasis role="bold">application context</emphasis>
					to look like
					this:<programlisting language="xml">&lt;objects>

 &lt;object class="com.myclasses.MyObject" id="myObject" scope="singleton"/>
 
 &lt;object class="com.myclasses.MyOtherObject" id="myOtherObject" scope="prototype"/>

&lt;/objects></programlisting></para>
				<para>And the <emphasis role="bold">child context</emphasis> looking like
					this:<programlisting language="xml">&lt;objects>

 &lt;object class="com.myclasses.moduleimplementations.MyOtherObject" id="myOtherObject" scope="prototype"/>

&lt;/objects></programlisting></para>
				<para>When the <emphasis role="bold">child context</emphasis> is created, we will set the
						<emphasis role="bold">application context</emphasis> as its
					parent:<programlisting language="actionscript">var childContext:DefaultApplicationContext = new DefaultApplicationContext("module-context.xml");
childContext.parent = applicationContext;</programlisting></para>
				<para>The result of this is that, when an object with id <emphasis role="bold">myOtherObject</emphasis> is requested from the <emphasis role="bold">application
						context</emphasis>, you will receive an instance of type <emphasis role="italic">com.myclasses.MyOtherObject</emphasis>. However, when you request the same object id
					from the <emphasis role="bold">child context</emphasis>, you will receive an instance of
					type <emphasis role="italic">com.myclasses.moduleimplementations.MyOtherObject</emphasis>.</para>
				<para> Next, we change both configurations slightly, add some dependencies and show how to
					override those dependencies in the child configuration.</para>
				<para> Here's how the <emphasis role="bold">application context</emphasis>'s configuration
					looks:<programlisting language="xml">&lt;objects>

 &lt;object class="com.myclasses.MyObject" id="myObject" scope="singleton"/>
 
 &lt;object class="com.myclasses.MyOtherObject" id="myOtherObject" scope="prototype">
  &lt;property name="dependency" ref="myDependency"/>
 &lt;/object>
 
 &lt;object class="com.dependencies.MyDependency" id="myDependency"/>

&lt;/objects></programlisting></para>
				<para> Now requesting an object with id  <emphasis role="bold">myOtherObject</emphasis>
					 from the <emphasis role="bold">application context</emphasis> will yield you an instance
					of type  <emphasis role="italic">com.myclasses.MyOtherObject</emphasis>  with a  <emphasis role="italic">dependency</emphasis>  property value set to an instance of type 
						<emphasis role="italic">com.dependencies.MyDependency</emphasis>.</para>
				<para>After that we change the <emphasis role="bold">child context</emphasis> configuration
					to look like
					this:<programlisting language="xml">&lt;objects>

 &lt;object class="com.moduledependencies.MyDependency" id="myDependency"/>

&lt;/objects></programlisting></para>
				<para>When we subsequently request an object with id <emphasis role="bold">myOtherObject</emphasis> from the <emphasis role="bold">child context</emphasis> the
					result will be an instance of type  <emphasis role="italic">com.myclasses.MyOtherObject</emphasis>  with a  <emphasis role="italic">dependency</emphasis>  property value set to an instance of type <emphasis role="italic">com.moduledependencies.MyDependency</emphasis>.<note>
						<para>Overriding references like this will only work on objects that are scoped as  <emphasis
								role="italic">prototype</emphasis> , this is because its very
							probable that the object has already been created and cached by the
							parent context when requested, and injecting singletons created by the
							parent with  <emphasis role="italic">dependencies</emphasis>  created by
							the  <emphasis role="italic">child</emphasis>  context will suddenly put
							a dependency from the application context on the child context, which is
							undesirable.</para>
					</note></para>
			</sect3>
		</sect2>
		<sect2 xml:id="context-children">
			<title>Context children</title>
			<para>The second case describes a scenario where the parent knows about the child, yet the child
				has no knowledge of its parent. For this the <emphasis role="italic"
					>applicationContext.addChildContext()</emphasis> method may be used. The method
				expects two
				arguments:<programlisting language="actionscript">function addChildContext(childContext:IApplicationContext, settings:ContextShareSettings=null):IApplicationContext;</programlisting></para>
			<para>The first is, naturally, the <emphasis role="italic">IApplicationContext</emphasis> instance that will be added as the child to the
				current <literal>IApplicationContext</literal>. The second argument is more
				important, the <literal>ContextShareSettings</literal> instance determines which
				aspects of the parent will be shared with the child context. A
					<literal>ContextShareSettings</literal> instance has the following <emphasis role="italic">Boolean</emphasis> properties to specify these aspects:<itemizedlist>
					<listitem>
						<para>shareDefinitions - If <emphasis role="bold">true</emphasis> all of the object
							definitions of the parent, that have their <emphasis role="italic">childContextAccess</emphasis> property set to <emphasis role="bold">ChildContextObjectDefinitionAccess.DEFINITION</emphasis> or
								<emphasis role="bold">ChildContextObjectDefinitionAccess.FULL</emphasis>, will be cloned
							and added to the child context. The default <emphasis role="italic">childContextAccess</emphasis> value for an
								<literal>ObjectDefinition</literal> is <emphasis role="bold">ChildContextObjectDefinitionAccess.FULL</emphasis>.</para>
					</listitem>
					<listitem>
						<para>shareSingletons - If <emphasis role="bold">true</emphasis> all of the
							singletons in the parent's cache will be added to the child's cache,
							provided that an object with the same name doesn't already exist in the
							child context.</para>
					</listitem>
					<listitem>
						<para>shareProperties - If <emphasis role="bold">true</emphasis> the properties registered in
							the parent's <literal>IPropertiesProvider</literal> will be copied to
							the child context. Properties with the same name that are already
							present in the child context will not be overriden.</para>
					</listitem>
				</itemizedlist></para>
			<para>Lastly, there is the <emphasis role="italic">eventBusShareSettings</emphasis> property,
				this property is of type <literal>EventBusShareSettings</literal> and determines how
				the eventbuses of the parent and child contexts will be connected. First there is
				the <emphasis role="italic">shareKind</emphasis> property, this is of type
					<literal>EventBusShareKind</literal>. This type defines the following ways of
				eventbus sharing:<itemizedlist>
					<listitem>
						<para>NONE - The eventbuses will not be connected.</para>
					</listitem>
					<listitem>
						<para>BOTH_WAYS - Events dispatched by the parent will be routed to the
							child's eventbus, and vice versa, events dispatched by the child will be
							routed to the parent.</para>
					</listitem>
					<listitem>
						<para>CHILD_LISTENS_TO_PARENT - Events dispatched by the parent will be
							routed to the child's eventbus.</para>
					</listitem>
					<listitem>
						<para>PARENT_LISTENS_TO_CHILD - Events dispatched by the child will be
							routed to the parent's eventbus.</para>
					</listitem>
					<listitem>
						<para>ASSIGN_PARENT_EVENTBUS - The parent's eventbus will be assigned to the
							child context, so that the contexts effectively share one eventbus
							instance.</para>
					</listitem>
				</itemizedlist></para>
			<para>The <emphasis role="italic">shareRegularEvents</emphasis> property determines if events
				that are dispatched without a specific topic will be shared between the eventbuses.
				And lastly, the <emphasis role="italic">sharedTopics</emphasis> property determines
				which topics will be shared. So, for instance, if it is required that the parent
				listens to the child context for events of topic "<emphasis role="bold"
					>SHARED</emphasis>", this <literal>EventBusShareSettings</literal> instance will
				suffice:<programlisting language="actionscript">var settings:EventBusShareSettings = new EventBusShareSettings(<emphasis role="bold">false</emphasis>, <emphasis role="bold">EventBusShareKind.PARENT_LISTENS_TO_CHILD</emphasis>, <emphasis role="bold">new &lt;Object>["SHARED"]</emphasis>);</programlisting></para>
			<para>When the <emphasis role="bold">settings</emphasis> instance that is passed to the <emphasis
					role="italic">addChildContext()</emphasis> method is <emphasis role="bold"
					>null</emphasis>, a default settings object will be created. The default
				property values for a <literal>ContextShareSettings</literal> are:<itemizedlist>
					<listitem>
						<para>shareDefinitions - <emphasis role="bold">true</emphasis>.</para>
					</listitem>
					<listitem>
						<para>shareSingletons - <emphasis role="bold">true</emphasis>.</para>
					</listitem>
					<listitem>
						<para>shareProperties - <emphasis role="bold">true</emphasis>.</para>
					</listitem>
					<listitem>
						<para>eventBusShareSettings - <emphasis role="italic">shareRegularEvents</emphasis>:<emphasis
								role="bold">true</emphasis>, <emphasis role="italic"
								>shareKind</emphasis>:<emphasis role="bold"
								>EventBusShareKind.ASSIGN_PARENT_EVENTBUS</emphasis>, <emphasis
								role="italic">topics</emphasis>:<emphasis role="bold"
								>null</emphasis>.</para>
					</listitem>
				</itemizedlist><note>
					<para>Only add a child context <emphasis role="bold"><emphasis role="italic"
								>BEFORE</emphasis></emphasis> the child context has been loaded and
						initialized!</para>
				</note></para>
		</sect2>
		<sect2 xml:id="contexts-and-modules">
			<title>Contexts and modules</title>
			<para>When using modules in a Flex application Spring Actionscript allows a context that is assigned to a Module to autowire its stage components, should this be required.</para>
				<note>
					<para>It is important to set the <emphasis role="italic"
						>MXMLApplicationContextBase.modulePolicy</emphasis> property to <emphasis
						role="bold">ModulePolicy.IGNORE</emphasis> on the <emphasis role="italic"
							><emphasis role="underline">parent</emphasis></emphasis> context. When
					failing to set this property the parent context will automatically try to
					autowire any modules added to the stage. This property defaults to <emphasis
						role="bold">ModulePolicy.AUTOWIRE</emphasis>.</para>
				</note>
				<para>In a Flex application that uses the <abbrev>MXML</abbrev> based contexts it is possible to
				let a parent context detect the creation of child contexts (usually in a module) and
				add them automatically to its child list.</para>
					<para>The way this works is as follows. When an <abbrev>MXML</abbrev> based context is created
				it automatically adds its parent component as a root view. This component's
				SystemManager is queried to see if its <emphasis role="italic"
					>isTopLevelRoot</emphasis> property is set to <emphasis role="bold"
					>true</emphasis>. In this case the context will assume it will act as the parent
				and will listen to the static <emphasis role="italic"
					>MXMLApplicationContextBase.sharedContextDispatcher</emphasis> for <emphasis
					role="bold">MXMLContextEvent.CREATED</emphasis> events. If the <emphasis
					role="italic">isTopLevelRoot</emphasis> property is <emphasis role="bold"
					>false</emphasis> the specified context will dispatch a <emphasis role="bold"
					>MXMLContextEvent.CREATED</emphasis> event through the same shared event
				dispatcher.</para>
					<para>This behaviour is determined by the <emphasis role="italic">autoAddChildren</emphasis> property on the
					<literal>MXMLApplicationContextBase</literal>. Default this property is set to
					<emphasis role="bold">true</emphasis>.</para>
				<para>To determine the default <literal>ContextShareSettings</literal> to be used while adding
				children, set the <emphasis role="italic"
					>MXMLApplicationContextBase.defaultShareSettings</emphasis> to the desired
				instance. When different settings are needed for different child contexts listen for
				the <emphasis role="bold">ChildContextEvent.BEFORE_CHILD_CONTEXT_ADD</emphasis>
				event on the parent context and assign the desired
					<literal>ContextShareSettings</literal> instance on the given <emphasis
					role="italic">ChildContextEvent.shareSettings</emphasis> property.</para>
			<para>The <literal>ChildContextEvent</literal> is cancelable, so if the event handler
				calls <emphasis role="italic">ChildContextEvent.preventDefault()</emphasis> the
				child context will <emphasis role="bold">NOT</emphasis> be added.</para>
			<para>The same holds true for the <emphasis role="bold"
					>ChildContextEvent.BEFORE_CHILD_CONTEXT_REMOVE</emphasis> event, when <emphasis
					role="italic">ChildContextEvent.preventDefault()</emphasis> is called on it the
				child context will <emphasis role="bold">NOT</emphasis> be removed.</para>
			<para>If the way that children are added needs very heavy customization it is possible to
				override the standard functionality completely by assigning a custom function to the
					<emphasis role="italic">ContextEvent.customAddChildFunction</emphasis> property.
				This function needs to have this signature:<programlisting language="actionscript">function(parentContext:IApplicationContext, childContext:IApplicationContext, settings:ContextShareSettings):void;</programlisting><note>
					<para>The only thing that will be done by the parent context when using a custom
						child add function is to actually add the child context to its list of
						children. Any other logic is deferred to the custom function.</para>
				</note></para>
			<para>A more elaborate way of overriding the child logic is by creating an
				implementation of the <literal>IChildContextManager</literal> interface and adding
				it to the configuration. If an application context spots an
					<literal>IChildContextManager</literal> it will use that instead of its default
				implementation.</para>
			<para>Check out the <literal xlink:href="/samples/index.html">samples section</literal>
				for a reference application that demonstrates the multi-module support that Spring
				Actionscript offers.</para>
		</sect2>
		<sect2 xml:id="application-properties-objectfactory-postprocessor">
			<title>ApplicationPropertiesObjectFactoryPostProcessor</title>
			<para>This processor enables the <literal>MXMLApplicationContext</literal> to inject a number of
				Application properties into its managed objects. The following properties are
				available: <itemizedlist>
					<listitem>
						<para>application.frameRate</para>
					</listitem>
					<listitem>
						<para>application.historyManagementEnabled</para>
					</listitem>
					<listitem>
						<para>application.pageTitle</para>
					</listitem>
					<listitem>
						<para>application.resetHistory</para>
					</listitem>
					<listitem>
						<para>application.scriptRecursionLimit</para>
					</listitem>
					<listitem>
						<para>application.scriptTimeLimit</para>
					</listitem>
					<listitem>
						<para>application.url</para>
					</listitem>
					<listitem>
						<para>application.url.protocol</para>
					</listitem>
					<listitem>
						<para>application.url.host</para>
					</listitem>
					<listitem>
						<para>application.url.port</para>
					</listitem>
					<listitem>
						<para>application.usePreloader</para>
					</listitem>
					<listitem>
						<para>application.viewSourceURL</para>
					</listitem>
				</itemizedlist> And besides those, any application parameters will be added by name
				as well. So if the a parameter called  <emphasis role="italic">myAppVar</emphasis>
				 is passed into the application it will be available as an external property by the
				name of  <emphasis role="italic">application.myAppVar</emphasis> . To inject these
				values into an object add them into the configuration like this:
				<programlisting language="xml">&lt;sas:Object id="myClass" clazz="{MyClass}">
	&lt;sas:Property name="frameRate" value="$(application.frameRate)"/>
&lt;/sas:Object></programlisting></para>
			<para>To enable the factory postprocessor, you also need to add a definition for it to
				the configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="applicationPropertiesObjectFactoryPostProcessor" clazz="{<emphasis role="bold">ApplicationPropertiesObjectFactoryPostProcessor</emphasis>}"/></programlisting>
		</sect2>
	</sect1>

</chapter>
