<?xml version="1.0" encoding="utf-8"?>
<objects xsi:schemaLocation="http://www.springactionscript.org/schema/objects http://www.springactionscript.org/schema/objects/spring-actionscript-objects-1.0.xsd"
		 xmlns="http://www.springactionscript.org/schema/objects"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<property file="strings.properties.txt"/>

	<!--
		 To enable stage wiring we need to add this stageprocessor to our configuration
	-->
	<object id="stageAutowirer"
			class="org.springextensions.actionscript.stage.DefaultAutowiringStageProcessor"/>

	<object id="modelInstance"
			class="org.springextensions.actionscript.samples.stagewiring.classes.ApplicationModel"/>

	<!-- We need to mark this object definition with primary="true",
		 because there's two definitions in this configuration that
		 describe an Object of type String. By marking one of them
		 as the primary autowiring candidate, the container will know
		 which object to inject into the AutowiredLabelWiredByType component.
	-->
	<object id="titleTextPrimary"
			class="String"
			primary="true">
		<constructor-arg value="This is autowired text, wired by type"/>
	</object>

	<!--
		 The id of this object definition matches the property 'titleText' on the
		 AutowiredLabelWiredByName component, this way the container will know that
		 it needs to inject this instance into the component.
	-->
	<object id="titleText"
			class="String">
		<constructor-arg value="This is autowired text, wired by name"/>
	</object>

	<!--
		 The id of this object definition matches the 'name' argument on the
		 AutowiredLabelWithExplicitName metadata, now the container will know that
		 it needs to inject this instance into the component.
	-->
	<object id="explicitLabelText"
			class="String">
		<constructor-arg value="This is autowired text, wired by an explicit name"/>
	</object>

	<!--
		 Be sure to always mark object definitions for stage org.springextensions.actionscript.samples.stagewiring.components.components with scope="prototype",
		 otherwise at application startup and instance of the component will be created and
		 added to the singleton cache, which doesn't make any sense because the component
		 will be instantiated through MXML.
	-->
	<object id="autowiredLabel"
			class="org.springextensions.actionscript.samples.stagewiring.components.components.AutowiredLabelWithDefinition"
			scope="prototype">
		<property name="titleText"
				  value="This is autowired text from a definition"/>
	</object>

	<!--
		 The name if the IFactoryObject implementation matches a property name on the RepeaterLabel
		 component, therefore each instance of this component will receive a text generated by
		 tis factory.
	-->
	<object id="repeaterLabel"
			class="org.springextensions.actionscript.samples.stagewiring.classes.LabelTextFactory"/>

</objects>
